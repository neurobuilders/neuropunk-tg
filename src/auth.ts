import NextAuth, { NextAuthOptions } from "next-auth";
import env from "./env";
import Credentials from "next-auth/providers/credentials";
import { AuthDataValidator, TelegramUserData } from "@telegram-auth/server";
import { createClient } from "./helpers/supabase/server";
// import { getTelegramUser, login } from "@/helpers/api/telegram";

export const config: NextAuthOptions = {
  providers: [
    Credentials({
      id: "telegram-login",
      name: "Telegram Login",
      credentials: {},
      async authorize(data) {
        // console.log("> authorize req", data);
        const { initDataRaw } = data as { initDataRaw: string };
        try {
          const initData = new Map(new URLSearchParams(initDataRaw));

          const validator = new AuthDataValidator({
            botToken: env.telegram.botToken,
          });

          //   const data = objectToAuthDataMap((query || {}) as any);
          const user = await validator.validate(initData);
          console.log("user", user);

          if (!user.id) {
            throw new Error("User object does not have 'id' property");
          }
          const supabase = await createClient();
        } catch (err) {
          console.error(err);
        }

        return null;
        // const user = await validator.validate(data);
        // console.log("user", user);
        // if (user.id) {
        //   const foundUser = await getTelegramUser(user.id);
        //   if (foundUser) {
        //     console.log("foundUser", foundUser);
        //     const loginCookie = await login(
        //       foundUser.email,
        //       foundUser.autogenerated_password
        //     );
        //     console.log("loginCookie", loginCookie);
        //     if (loginCookie) {
        //       //   let response = NextResponse.next();
        //       //   response.cookies.set(
        //       //     "session_token",
        //       //     loginCookie["artistonmap_session_token"],
        //       //     loginCookie
        //       //   );
        //       //   return response;
        //       const returned = {
        //         id: foundUser.id.toString(),

        //         email: foundUser.email?.toString(),
        //         username: user.username?.toString(),
        //         name: [user.first_name, user.last_name || ""]
        //           .filter(Boolean)
        //           .join(" "),
        //         image: user.photo_url,
        //         // cookie: loginCookie,
        //       };

        //       return returned;
        //     }
        //   }
        // }
      },
    }),
  ],
  callbacks: {
    async session(props) {
      console.log("> session", props);
      const { session, user, token } = props;
      //   const loginCookie = await login(user.email, user.autogenerated_password);
      //   console.log("loginCookie", loginCookie);
      //   session.user.id = session.user.email;
      return session;
    },
    async signIn(props) {
      console.log("> signIn", props);
      return true;
    },
    // async redirect(props) {
    //   console.log("> redirect", props);
    //   const { url, baseUrl } = props;
    //   // Allows relative callback URLs
    //   if (url.startsWith("/")) return `${baseUrl}${url}`;
    //   // Allows callback URLs on the same origin
    //   else if (new URL(url).origin === baseUrl) return url;
    //   return baseUrl;
    // },
    async jwt(props) {
      console.log("> jwt", props);
      const { token, user, account, profile, isNewUser } = props;
      return token;
    },
  },
  //   pages: {
  //     signIn: "/auth/signin",
  //     error: "/auth/error",
  //   },
  debug: true,
};

export const handler = NextAuth(config);

export const { handlers, auth, signIn, signOut } = handler;
