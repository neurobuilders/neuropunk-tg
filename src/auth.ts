import NextAuth, { NextAuthOptions } from "next-auth";
import env from "@/env";
import Credentials from "next-auth/providers/credentials";
import { AuthDataValidator } from "@telegram-auth/server";
import { createClient } from "@/helpers/supabase/server";

const cookiePrefix = "neuropunk_auth_";

export const config: NextAuthOptions = {
  providers: [
    Credentials({
      id: "tg-miniapp",
      name: "Telegram Mini App",
      credentials: {},
      async authorize(data) {
        // console.log("> authorize req", data);
        const { initDataRaw } = data as { initDataRaw: string };
        try {
          const initData = new Map(new URLSearchParams(initDataRaw));

          //   console.log("initData", initData);

          const validator = new AuthDataValidator({
            botToken: env.telegram.botToken,
          });

          const user = await validator.validate(initData);
          //   const user = JSON.parse(initData.get("user")!);
          //   console.log("user", user);

          if (!user.id) {
            throw new Error("User object does not have 'id' property");
          }
          const supabase = await createClient();

          const { data: dbUser } = await supabase
            .from("users")
            .select()
            .eq("tg_id", user.id)
            .maybeSingle();

          //   console.log("dbUser", dbUser);

          if (dbUser) {
            // console.log("database user", dbUser);
            const {
              id,
              first_name,
              last_name,
              email,
              tg_id,
              tg_avatar_url,
              tg_language_code,
              is_tg_premium,
              created_at,
            } = dbUser;
            return {
              id,
              firstName: first_name,
              lastName: last_name,
              name: [first_name, last_name || ""].filter(Boolean).join(" "),
              tgId: tg_id,
              avatarUrl: tg_avatar_url,
              languageCode: tg_language_code,
              isPremium: is_tg_premium,
              createdAt: created_at,
            };
          }
        } catch (err) {
          console.error(err);
        }

        return null;
      },
    }),
  ],
  callbacks: {
    // async session(props) {
    //   console.log("> session", props);
    //   const { session, user, token } = props;
    //   //   const loginCookie = await login(user.email, user.autogenerated_password);
    //   //   console.log("loginCookie", loginCookie);
    //   //   session.user.id = session.user.email;
    //   return session;
    // },
    // async signIn(props) {
    //   console.log("> signIn", props);
    //   return true;
    // },
    // async redirect(props) {
    //   console.log("> redirect", props);
    //   const { url, baseUrl } = props;
    //   // Allows relative callback URLs
    //   if (url.startsWith("/")) return `${baseUrl}${url}`;
    //   // Allows callback URLs on the same origin
    //   else if (new URL(url).origin === baseUrl) return url;
    //   return baseUrl;
    // },
    // async jwt(props) {
    //   console.log("> jwt", props);
    //   const { token, user, account, profile, isNewUser } = props;
    //   return token;
    // },
  },
  //   pages: {
  //     signIn: "/auth/signin",
  //     error: "/auth/error",
  //   },
  debug: true,
  useSecureCookies: true,
  cookies: {
    sessionToken: {
      name: `__Secure-next-auth.session-token`,
      options: {
        httpOnly: true,
        sameSite: "None",
        path: "/",
        secure: true,
        partitioned: true,
      },
    },
    callbackUrl: {
      name: `__Secure-next-auth.callback-url`,
      options: {
        sameSite: "None",
        path: "/",
        secure: true,
        partitioned: true,
      },
    },
    csrfToken: {
      name: `__Host-next-auth.csrf-token`,
      options: {
        httpOnly: true,
        sameSite: "None",
        path: "/",
        secure: true,
        partitioned: true,
      },
    },
    pkceCodeVerifier: {
      name: `${cookiePrefix}next-auth.pkce.code_verifier`,
      options: {
        httpOnly: true,
        sameSite: "lax",
        path: "/",
        secure: true,
        maxAge: 900,
      },
    },
    state: {
      name: `${cookiePrefix}next-auth.state`,
      options: {
        httpOnly: true,
        sameSite: "lax",
        path: "/",
        secure: true,
        maxAge: 900,
      },
    },
    nonce: {
      name: `${cookiePrefix}next-auth.nonce`,
      options: {
        httpOnly: true,
        sameSite: "lax",
        path: "/",
        secure: true,
      },
    },
  },
  //   cookies: {
  //     sessionToken: {
  //       name: `${cookiePrefix}session-token`,
  //       options: {
  //         httpOnly: true,
  //         sameSite: "lax",
  //         path: "/",
  //         secure: true,
  //       },
  //     },
  //     callbackUrl: {
  //       name: `${cookiePrefix}callback-url`,
  //       options: {
  //         sameSite: "lax",
  //         path: "/",
  //         secure: true,
  //       },
  //     },
  //     csrfToken: {
  //       name: `${cookiePrefix}csrf-token`,
  //       options: {
  //         httpOnly: true,
  //         sameSite: "lax",
  //         path: "/",
  //         secure: true,
  //       },
  //     },
  //     pkceCodeVerifier: {
  //       name: `${cookiePrefix}pkce-code-verifier`,
  //       options: {
  //         httpOnly: true,
  //         sameSite: "lax",
  //         path: "/",
  //         secure: true,
  //         maxAge: 900,
  //       },
  //     },
  //     state: {
  //       name: `${cookiePrefix}state`,
  //       options: {
  //         httpOnly: true,
  //         sameSite: "lax",
  //         path: "/",
  //         secure: true,
  //         maxAge: 900,
  //       },
  //     },
  //     nonce: {
  //       name: `${cookiePrefix}nonce`,
  //       options: {
  //         httpOnly: true,
  //         sameSite: "lax",
  //         path: "/",
  //         secure: true,
  //       },
  //     },
  //   },
};

export const handler = NextAuth(config);

export const { handlers, auth, signIn, signOut } = handler;
